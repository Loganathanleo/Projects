[{"/home/divum/appraisal/src/index.js":"1","/home/divum/appraisal/src/reportWebVitals.js":"2","/home/divum/appraisal/src/App.js":"3","/home/divum/appraisal/src/components/Common.js":"4","/home/divum/appraisal/src/components/Form/Appraisal.js":"5","/home/divum/appraisal/src/components/Form/Login.js":"6","/home/divum/appraisal/src/components/Form/ManagerForm.js":"7","/home/divum/appraisal/src/GoalComponent/GoalSetting.js":"8","/home/divum/appraisal/src/components/Form/TechnicalShowcase.js":"9","/home/divum/appraisal/src/components/Form/AppraisalForm.js":"10","/home/divum/appraisal/src/components/Form/Project.js":"11","/home/divum/appraisal/src/components/Form/AppraisalView.js":"12"},{"size":535,"mtime":1696845605183,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1696845605183,"results":"15","hashOfConfig":"14"},{"size":1289,"mtime":1697116864136,"results":"16","hashOfConfig":"14"},{"size":2570,"mtime":1697177008691,"results":"17","hashOfConfig":"14"},{"size":2867,"mtime":1697175785305,"results":"18","hashOfConfig":"14"},{"size":1780,"mtime":1697177443189,"results":"19","hashOfConfig":"14"},{"size":17819,"mtime":1697114729927,"results":"20","hashOfConfig":"14"},{"size":4603,"mtime":1697005490999,"results":"21","hashOfConfig":"14"},{"size":1943,"mtime":1697176506735,"results":"22","hashOfConfig":"14"},{"size":6509,"mtime":1697177999489,"results":"23","hashOfConfig":"14"},{"size":2306,"mtime":1697179218091,"results":"24","hashOfConfig":"14"},{"size":2636,"mtime":1697170867055,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"7dw4el",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"29"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/divum/appraisal/src/index.js",[],[],["64"],"/home/divum/appraisal/src/reportWebVitals.js",[],[],"/home/divum/appraisal/src/App.js",[],[],"/home/divum/appraisal/src/components/Common.js",[],[],"/home/divum/appraisal/src/components/Form/Appraisal.js",["65","66","67","68","69","70","71","72"],[],"/home/divum/appraisal/src/components/Form/Login.js",[],[],"/home/divum/appraisal/src/components/Form/ManagerForm.js",[],[],"/home/divum/appraisal/src/GoalComponent/GoalSetting.js",["73","74"],[],"import React, { useEffect, useState } from \"react\";\nimport { CardFooter, CardTitle, Table } from \"react-bootstrap\";\nimport { CircularProgressbar } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { Card } from \"react-bootstrap\";\n\nfunction GoalSetting() {\n  const [percentage, setPercentage] = useState(0);\n  const [inputField, setinputField] = useState([]);\n  const [range, setRange] = useState([]);\n  const [Goals, setGoals] = useState(0);\n\n  useEffect(() => {\n    const temp = 0;\n    for(let i =0;i < range.length ; i++){\n        temp += range[i];\n        console.log(range[i]);\n    }\n    console.log(temp);\n    let perce = setGoals * 100;\n    setPercentage(temp/perce);\n  }, [percentage]);\n\n  const addInput = () => {\n    setinputField([\n      ...inputField,\n      {\n        Project_Name: \"\",\n        Progress: 0,\n        Status: \"No Progress\",\n        Last_Updated: \"\",\n      },\n    ]);\n\n    setRange([...range, 0]);\n    setGoals(Goals + 1);\n  };\n\n  const updateStatus = (index, newValue) => {\n    const updatedInputField = [...inputField];\n    const status = newValue === 0 ? \"No Progress\" : newValue < 100 ? \"In Progress\" : \"Completed\";\n    updatedInputField[index].Progress = newValue;\n    updatedInputField[index].Status = status;\n\n    setinputField(updatedInputField);\n  };\n\n  const getStatusCount = (status) => {\n    return inputField.reduce((count, item) => (item.Status === status ? count + 1 : count), 0);\n  };\n\n\n  const no = getStatusCount(\"No Progress\");\n  const inpro = getStatusCount(\"In Progress\");\n  const com = getStatusCount(\"Completed\");\n\n  return (\n    <div>\n      <header style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n          <div style={{ textAlign: \"center\" }}>\n            <h4>Your Progress</h4>\n            <div style={{ width: 100, marginLeft: 21, height: 100 }}>\n              <CircularProgressbar className=\"bar\" value={percentage} text={`${percentage}%`} />\n            </div>\n          </div>\n        </div>\n        <div className=\"card-container\">\n            <Card className=\"cards\">\n                <CardTitle className=\"card-title\">{Goals}</CardTitle>\n                <CardFooter className=\"card-footer\">No.of Goals</CardFooter>\n            </Card>\n            <Card className=\"cards\">\n                <CardTitle className=\"card-title\">{inpro}</CardTitle>\n                <CardFooter className=\"card-footer\">In Progress</CardFooter>\n            </Card>\n            <Card className=\"cards\">\n                <CardTitle className=\"card-title\">{com}</CardTitle>\n                <CardFooter className=\"card-footer\">Completed</CardFooter>\n            </Card>\n            <Card className=\"cards\">\n                <CardTitle className=\"card-title\">{no}</CardTitle>\n                <CardFooter className=\"card-footer\">No Progress</CardFooter>\n            </Card>\n        </div>\n        <button onClick={addInput} className=\"goalAdd \">Add Goal+</button>\n      </header>\n      <Table>\n        <thead>\n          <tr className=\"thead-goal\">\n            <th>Goal</th>\n            <th>Progress</th>\n            <th>Status</th>\n            <th>Last Update</th>\n          </tr>\n        </thead>\n        <tbody>\n          {inputField.map((field, index) => (\n            <tr key={index} className=\"thead-goal\">\n              <td>\n                <input\n                  type=\"text\"\n                  name={`Project_Name_${index}`}\n                  placeholder=\"Set the Goal\"\n                  value={field.Project_Name}\n                  onChange={(e) => {\n                    const updatedInputField = [...inputField];\n                    updatedInputField[index].Project_Name = e.target.value;\n                    setinputField(updatedInputField);\n                  }}\n                />\n              </td>\n              <td>\n                <input\n                  type=\"range\"\n                  name={`Progress_${index}`}\n                  min={0}\n                  max={100}\n                  onChange={(e) => updateStatus(index, parseInt(e.target.value))}\n                  value={field.Progress}\n                />{field.Progress}\n              </td>\n              <td>\n                {field.Status}\n              </td>\n              <td>\n                <input\n                  type=\"date\"\n                  name={`Last_Update_${index}`}\n                  max={new Date().toISOString().split('T')[0]}\n                />\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </div>\n  );\n}\n\nexport default GoalSetting;\n","/home/divum/appraisal/src/components/Form/TechnicalShowcase.js",[],[],"/home/divum/appraisal/src/components/Form/AppraisalForm.js",["75","76"],[],"/home/divum/appraisal/src/components/Form/Project.js",["77"],[],"/home/divum/appraisal/src/components/Form/AppraisalView.js",[],[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":6,"column":10,"nodeType":"82","messageId":"83","endLine":6,"endColumn":22},{"ruleId":"80","severity":1,"message":"84","line":7,"column":10,"nodeType":"82","messageId":"83","endLine":7,"endColumn":23},{"ruleId":"80","severity":1,"message":"85","line":8,"column":10,"nodeType":"82","messageId":"83","endLine":8,"endColumn":21},{"ruleId":"80","severity":1,"message":"86","line":9,"column":10,"nodeType":"82","messageId":"83","endLine":9,"endColumn":18},{"ruleId":"80","severity":1,"message":"87","line":10,"column":10,"nodeType":"82","messageId":"83","endLine":10,"endColumn":19},{"ruleId":"80","severity":1,"message":"88","line":11,"column":10,"nodeType":"82","messageId":"83","endLine":11,"endColumn":28},{"ruleId":"80","severity":1,"message":"89","line":12,"column":10,"nodeType":"82","messageId":"83","endLine":12,"endColumn":31},{"ruleId":"80","severity":1,"message":"90","line":12,"column":33,"nodeType":"82","messageId":"83","endLine":12,"endColumn":57},{"ruleId":"91","severity":1,"message":"92","line":16,"column":9,"nodeType":"82","messageId":"93","endLine":16,"endColumn":13},{"ruleId":"94","severity":1,"message":"95","line":22,"column":6,"nodeType":"96","endLine":22,"endColumn":18,"suggestions":"97"},{"ruleId":"80","severity":1,"message":"98","line":2,"column":16,"nodeType":"82","messageId":"83","endLine":2,"endColumn":28},{"ruleId":"80","severity":1,"message":"99","line":2,"column":30,"nodeType":"82","messageId":"83","endLine":2,"endColumn":42},{"ruleId":"80","severity":1,"message":"100","line":7,"column":10,"nodeType":"82","messageId":"83","endLine":7,"endColumn":14},"no-new-object",["101"],"no-unused-vars","'contribution' is assigned a value but never used.","Identifier","unusedVar","'communication' is assigned a value but never used.","'initiatives' is assigned a value but never used.","'teamwork' is assigned a value but never used.","'potential' is assigned a value but never used.","'technicalexpertise' is assigned a value but never used.","'showTechnicalShowcase' is assigned a value but never used.","'setShowTechnicalShowcase' is assigned a value but never used.","no-const-assign","'temp' is constant.","const","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'range'. Either include it or remove the dependency array.","ArrayExpression",["102"],"'DropdownItem' is defined but never used.","'DropdownMenu' is defined but never used.","'desc' is assigned a value but never used.","no-object-constructor",{"desc":"103","fix":"104"},"Update the dependencies array to be: [percentage, range]",{"range":"105","text":"106"},[724,736],"[percentage, range]"]